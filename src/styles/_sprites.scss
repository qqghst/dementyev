$sprites: (
	'angle-down':
		"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg'%3e%3cg transform='translate(1 1)'%3e%3cpath d='M14.12 0 8 6.18 1.88 0 0 1.903 8 10l8-8.097L14.12 0Z' fill='currentColor'/%3e%3c/g%3e%3c/svg%3e",
);

$sizes: (
	'angle-down': (
		'width': 18px,
		'height': 12px,
	),
);

$variables: (/* EMPTY */);

// https://github.com/waldemarfm/sass-svg-uri/blob/v1.0.0/_svg-uri.scss
@function sprite-str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search);

	@if type-of($replace) == 'null' {
		$replace: '';
	}

	@if ($index) {
		@return str-slice($string, 1, $index - 1) + $replace +
			sprite-str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

@function sprite-svg-uri($value) {
	$output: $value;

	$output: sprite-str-replace($output, '"', "'");
	$output: sprite-str-replace($output, '<', '%3C');
	$output: sprite-str-replace($output, '>', '%3E');
	$output: sprite-str-replace($output, '&', '%26');
	$output: sprite-str-replace($output, '#', '%23');

	@return $output;
}

@mixin sprite($name, $user-variables: (), $include-size: false) {
	$sprite: map-get($sprites, $name);

	// Inject variables
	$default-variables: map-get($variables, $name);
	@if type-of($default-variables) == 'map' {
		@each $key, $value in map-merge($default-variables, $user-variables) {
			@if (not map-has-key($default-variables, $key)) {
				@warn 'Sprite \'#{$name}\' does not support variable named \'#{$key}\'';
			}

			$sprite: sprite-str-replace($sprite, '___#{$key}___', sprite-svg-uri(quote(#{$value})));
		}
	} @else if type-of($user-variables) == 'map' {
		@warn 'Sprite \'#{$name}\' does not contain any variables';
	}

	background: url($sprite) center no-repeat;

	@if $include-size {
		$size: map-get($sizes, $name);
		@if $include-size == true {
			background-size: map-get($size, width) map-get($size, height);
		} @else if $include-size == 'box' {
			width: map-get($size, width);
			height: map-get($size, height);
		}
	}
}
